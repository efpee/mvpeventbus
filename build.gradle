subprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'code-quality'

  dependencies {
    testCompile fileTree(dir:"${rootDir}/lib/default", include:'*.jar')
    testRuntime fileTree(dir: "${rootDir}/lib/coverage", include:'*.jar')
    compile fileTree(dir: "${rootDir}/lib/test", include:'*.jar')
  }

  checkstyleConfigFileName = "${rootDir}/config/checkstyle/application_checks.xml"

  checkstyleMain {
    ignoreFailures = true
  }

  checkstyleTest {
    ignoreFailures = true
    configFile = file("${rootDir}/config/checkstyle/junit.xml")
  }

  version = '1.0'

  jar {
    manifest.attributes provider: 'ICTects'
  }

  def instrumentationDir = sourceSets.main.classesDir
  def uninstrumentedDir = "${sourceSets.main.classesDir}-orig"
  def cobSerFile = "${project.buildDir}/cobertura.ser"

  test.doFirst {
    if ( project.computeCoverage ) {
      ant.taskdef(resource:'tasks.properties', classpath: configurations.testRuntime.asPath)
      ant {
        delete(file:cobSerFile, failonerror:false) // delete from previous run
        delete(dir: uninstrumentedDir, failonerror:false) // clean backup
        copy(toDir: uninstrumentedDir) { fileset(dir: instrumentationDir) } // make backup
        'cobertura-instrument'(datafile:cobSerFile) {
          fileset(dir: instrumentationDir, includes:"**/*.class")
        }
      }
    }
  }

  test {
    ignoreFailures = true
    systemProperties ["net.sourceforge.cobertura.datafile"] = cobSerFile
  }

  test.doLast {
    if ( project.computeCoverage && new File(uninstrumentedDir).exists() && new File(cobSerFile).exists()) {
      def outputDir = "${project.buildDirName}/${coverageDir}"
      ant {
        delete(file: instrumentationDir) // remove work directory
        move(file: uninstrumentedDir, tofile: instrumentationDir) // put original back
	'cobertura-report'(destdir: outputDir, 
			   format:'html', 
			   datafile: cobSerFile) { 
	  sourceSets.main.allJava.addToAntBuilder(ant, 'fileset')
	}
	'cobertura-report'(destdir: outputDir, 
			   format:'xml', 
			   datafile: cobSerFile) { 
	  sourceSets.main.allJava.addToAntBuilder(ant, 'fileset')
	}
      }
    }
  }
}

project.computeCoverage = false

configurations {
  tools {
    description = 'Needed for build file tasks'
  }
}

repositories {
  flatDir name: 'localRepository', dirs: 'lib/coverage'
}

dependencies {
  tools fileTree(dir: "${rootDir}/lib/coverage", include:'*.jar')
}

task setupCobertura << {
  prepareCoberturaTargets()
}

task coverage(dependsOn: setupCobertura) << {
  project.computeCoverage = true
}

task assembleCoverage(dependsOn: coverage) << {
  def dataFile = "${project.buildDirName}/cobertura.ser"
  def destDir = "${project.buildDirName}/${coverageDir}"
  ant {
    delete(file: dataFile, failonerror: false) // remove from previous run
    'cobertura-merge'(datafile: dataFile) {
      fileset(dir: '.', includes: "**/cobertura.ser")
    }
    'cobertura-report'(destdir: destDir, 
                       format:'html', 
                       datafile: dataFile) {
      subprojects.each { subproject -> subproject.sourceSets.main.allJava.addToAntBuilder(ant, 'fileset') }
    }
  }
}

def prepareCoberturaTargets() {
  ant.taskdef(resource:'tasks.properties', classpath: configurations.tools.asPath)
}

// Hudson expects the test results to be newer than the build start time, but gradle skips executing tests if the main source was not changed
task fixupTestDatesForHudson << {
  testReportFiles = fileTree(dir: '.', include: '**/build/test-results/TEST*.xml')
  testReportFiles.each { it.setLastModified(System.currentTimeMillis()) }
}
