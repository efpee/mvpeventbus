project.computeCoverage = false

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'code-quality'

    dependencies {
        testCompile fileTree(dir:"${rootDir}/lib/default", include:'*.jar')
        testRuntime fileTree(dir: "${rootDir}/lib/coverage", include:'*.jar')
        compile fileTree(dir: "${rootDir}/lib/test", include:'*.jar')
    }

    checkstyleConfigFileName = "${rootDir}/config/checkstyle/application_checks.xml"

    checkstyleMain {
        ignoreFailures = true
    }

    checkstyleTest {
        ignoreFailures = true
        configFile = file("${rootDir}/config/checkstyle/junit.xml")
    }

    version = '1.0'

    jar {
        manifest.attributes provider: 'ICTects'
    }

    def instrumentationDir = sourceSets.main.classesDir
    def uninstrumentedDir = "${sourceSets.main.classesDir}-orig"
    def cobSerFile = "${project.buildDir}/cobertura.ser"

    test.doFirst {
        println project.computeCoverage
        if ( project.computeCoverage ) {
            ant {
                delete(file:cobSerFile, failonerror:false) // delete from previous run
                delete(dir: uninstrumentedDir, failonerror:false) // clean backup
                copy(toDir: uninstrumentedDir) { fileset(dir: instrumentationDir) } // make backup
                taskdef(resource:'tasks.properties', classpath: configurations.testRuntime.asPath)
                'cobertura-instrument'(datafile:cobSerFile) {
                  fileset(dir: instrumentationDir, includes:"**/*.class")
                }
            }
        }
    }

    test {
        ignoreFailures = true
        systemProperties ["net.sourceforge.cobertura.datafile"] = cobSerFile
    }

    test.doLast {
        if ( project.computeCoverage && new File(uninstrumentedDir).exists() && new File(cobSerFile).exists()) {
            ant {
               delete(file: instrumentationDir) // remove work directory
               move(file: uninstrumentedDir, tofile: instrumentationDir) // put original back
            }
            // create cobertura reports
            ant.'cobertura-report'(destdir:"${project.buildDirName}/reports/coverage-results", 
                                   format:'html', 
                                   datafile: cobSerFile,
                                   srcdir:"src/main/java")
                                   //srcdir: sourceSets.main.java.srcDirs)
        }

    }
}

task coverage << {
     project.computeCoverage = true
}

task fixupTestDatesForHudson << {
    testReportFiles = fileTree(dir: '.', include: '**/build/test-results/TEST*.xml')
    testReportFiles.each { it.setLastModified(System.currentTimeMillis()) }
}

